import streamlit as st
import numpy as np
import plotly.graph_objects as go
import pandas as pd
from scipy.optimize import linprog

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Programaci√≥n Lineal: M√©todo de Dos Fases y Dualidad",
    page_icon="üìä",
    layout="wide"
)

# CSS personalizado para una mejor presentaci√≥n
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
    }
    .example-box {
        background-color: #e0f7fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    h1, h2, h3 {
        color: #ff1493;
    }
    .highlight {
        background-color: #ffff99;
        padding: 0.5rem;
        border-radius: 0.3rem;
    }
    </style>
""", unsafe_allow_html=True)

# Configuraci√≥n de navegaci√≥n
st.sidebar.title("üìö Navegaci√≥n del Curso")
section = st.sidebar.radio("Seleccionar Tema", [
    "üéØ Introducci√≥n",
    "üîç Fase 1: Encontrar Factibilidad",
    "‚ö° Fase 2: Optimizaci√≥n",
    "üìù Ejemplo Completo",
    "üîÑ Conceptos de Dualidad",
    "‚öñÔ∏è Interpretaci√≥n Econ√≥mica"
])

def create_example_problem():
    """Crea un ejemplo real para demostraci√≥n"""
    st.markdown("""
    ### Problema de Asignaci√≥n de Recursos en Ciencia de Datos

    Un equipo de ciencia de datos est√° implementando dos modelos de machine learning: Modelo A y Modelo B. Desean maximizar la precisi√≥n total.

    **Recursos por unidad:**
    - Modelo A: 3 horas de GPU, 5 GB de RAM
    - Modelo B: 4 horas de GPU, 2 GB de RAM

    **Recursos Disponibles:**
    - 100 horas de GPU
    - 80 GB de RAM

    **Precisi√≥n por unidad:**
    - Modelo A: 0.8
    - Modelo B: 0.9

    **Formulaci√≥n del Problema:**
    ```
    Maximizar: Z = 0.8x‚ÇÅ + 0.9x‚ÇÇ
    Sujeto a:
        3x‚ÇÅ + 4x‚ÇÇ ‚â§ 100  (restricci√≥n de GPU)
        5x‚ÇÅ + 2x‚ÇÇ ‚â§ 80   (restricci√≥n de RAM)
        x‚ÇÅ, x‚ÇÇ ‚â• 0
    ```
    """)

    return {
        'c': [-0.8, -0.9],  # Negativo porque scipy.optimize minimiza
        'A_ub': [[3, 4], [5, 2]],
        'b_ub': [100, 80],
        'bounds': [(0, None), (0, None)]
    }

def plot_feasible_region(constraints, bounds):
    """Dibuja la regi√≥n factible para el ejemplo"""
    x1 = np.linspace(0, 50, 1000)

    # Restricci√≥n de GPU: 3x‚ÇÅ + 4x‚ÇÇ ‚â§ 100
    x2_gpu = (100 - 3*x1) / 4

    # Restricci√≥n de RAM: 5x‚ÇÅ + 2x‚ÇÇ ‚â§ 80
    x2_ram = (80 - 5*x1) / 2

    fig = go.Figure()

    # Agregar restricciones
    fig.add_trace(go.Scatter(x=x1, y=x2_gpu, name='Restricci√≥n de GPU',
                             line=dict(color='blue', dash='dash')))
    fig.add_trace(go.Scatter(x=x1, y=x2_ram, name='Restricci√≥n de RAM',
                             line=dict(color='red', dash='dash')))

    # Rellenar regi√≥n factible
    x1_feasible = []
    x2_feasible = []
    for x in x1:
        y_gpu = (100 - 3*x) / 4
        y_ram = (80 - 5*x) / 2
        y = min(y_gpu, y_ram)
        if y >= 0:
            x1_feasible.append(x)
            x2_feasible.append(y)

    fig.add_trace(go.Scatter(x=x1_feasible, y=x2_feasible, 
                             fill='tozeroy', fillcolor='rgba(0,176,246,0.2)',
                             name='Regi√≥n Factible', line=dict(color='rgba(255,255,255,0)')))

    fig.update_layout(
        title="Visualizaci√≥n de la Regi√≥n Factible",
        xaxis_title="Unidades del Modelo A (x‚ÇÅ)",
        yaxis_title="Unidades del Modelo B (x‚ÇÇ)",
        showlegend=True
    )

    return fig

if section == "üéØ Introducci√≥n":
    st.title("M√©todo de Dos Fases y Dualidad en Programaci√≥n Lineal")
    
    st.markdown("""
    ### Visi√≥n General
    El M√©todo de Dos Fases es una herramienta poderosa para resolver problemas de programaci√≥n lineal cuando:
    1. No tenemos una soluci√≥n b√°sica factible obvia
    2. El problema tiene restricciones de igualdad o ‚â•

    ### Conceptos Clave
    - **Fase 1**: Encontrar una soluci√≥n b√°sica factible inicial
    - **Fase 2**: Optimizar la funci√≥n objetivo
    - **Variables Artificiales**: Utilizadas para encontrar factibilidad
    - **Soluci√≥n B√°sica**: Puntos extremos de la regi√≥n factible
    """)
    
    # Mostrar un ejemplo sencillo
    st.markdown("""
    <div class='example-box'>
    <h3>Ejemplo Sencillo</h3>
    Considera un problema de asignaci√≥n de recursos en ciencia de datos con dos variables:
    - x‚ÇÅ: cantidad de modelos entrenados con algoritmo A
    - x‚ÇÇ: cantidad de modelos entrenados con algoritmo B

    Con restricciones:
    1. x‚ÇÅ + x‚ÇÇ = 10
    2. 2x‚ÇÅ + x‚ÇÇ ‚â• 8
    3. x‚ÇÅ, x‚ÇÇ ‚â• 0

    Este problema requiere el m√©todo de dos fases debido a las restricciones de igualdad y ‚â•.
    </div>
    """, unsafe_allow_html=True)

elif section == "üîç Fase 1: Encontrar Factibilidad":
    st.title("Fase 1: Encontrar la Factibilidad Inicial")
    
    problem = create_example_problem()
    
    st.markdown("""
    ### Proceso de la Fase 1
    1. Agregar variables artificiales para crear una soluci√≥n b√°sica factible inicial
    2. Crear una funci√≥n objetivo auxiliar que minimice la suma de variables artificiales
    3. Resolver utilizando el m√©todo simplex
    4. Verificar si las variables artificiales son cero
    """)
    
    # Demostraci√≥n interactiva
    st.plotly_chart(plot_feasible_region(problem['A_ub'], problem['bounds']))
    
    # Mostrar el proceso con ejemplo real
    st.markdown("""
    ### Ejemplo: Convertir Restricciones ‚â•
    Para la restricci√≥n: 2x‚ÇÅ + x‚ÇÇ ‚â• 8
    1. Restar variable de holgura: 2x‚ÇÅ + x‚ÇÇ - s‚ÇÅ = 8
    2. Agregar variable artificial: 2x‚ÇÅ + x‚ÇÇ - s‚ÇÅ + A‚ÇÅ = 8

    ### Funci√≥n Objetivo de la Fase 1
    Minimizar Z = A‚ÇÅ (suma de variables artificiales)
    """)

elif section == "‚ö° Fase 2: Optimizaci√≥n":
    st.title("Fase 2: Optimizaci√≥n")
    
    problem = create_example_problem()
    
    # Resolver el problema
    result = linprog(problem['c'], A_ub=problem['A_ub'], b_ub=problem['b_ub'],
                     bounds=problem['bounds'], method='highs')
    
    st.markdown("""
    ### Proceso de la Fase 2
    1. Eliminar variables artificiales
    2. Usar la soluci√≥n b√°sica factible inicial de la Fase 1
    3. Optimizar la funci√≥n objetivo original
    """)
    
    # Mostrar soluci√≥n √≥ptima
    st.markdown("### Soluci√≥n √ìptima")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Modelos A (x‚ÇÅ)", f"{result.x[0]:.1f}")
    with col2:
        st.metric("Modelos B (x‚ÇÇ)", f"{result.x[1]:.1f}")
    
    st.metric("Precisi√≥n M√°xima", f"{-result.fun:.2f}")
    
elif section == "üìù Ejemplo Completo":
    st.title("Ejemplo Completo: Asignaci√≥n de Recursos")
    
    problem = create_example_problem()
    
    # Visualizaci√≥n
    st.plotly_chart(plot_feasible_region(problem['A_ub'], problem['bounds']))
    
    # Soluci√≥n paso a paso
    st.markdown("""
    ### Soluci√≥n Paso a Paso
    
    1. **Problema Original**
    ```
    Maximizar: Z = 0.8x‚ÇÅ + 0.9x‚ÇÇ
    Sujeto a:
        3x‚ÇÅ + 4x‚ÇÇ ‚â§ 100  (GPU)
        5x‚ÇÅ + 2x‚ÇÇ ‚â§ 80   (RAM)
        x‚ÇÅ, x‚ÇÇ ‚â• 0
    ```
    
    2. **Forma Est√°ndar**
    ```
    Maximizar: Z = 0.8x‚ÇÅ + 0.9x‚ÇÇ
    Sujeto a:
        3x‚ÇÅ + 4x‚ÇÇ + s‚ÇÅ = 100
        5x‚ÇÅ + 2x‚ÇÇ + s‚ÇÇ = 80
        x‚ÇÅ, x‚ÇÇ, s‚ÇÅ, s‚ÇÇ ‚â• 0
    ```
    """)
    
    # Sliders interactivos para explorar soluciones
    st.markdown("### Explora Diferentes Soluciones")
    x1_val = st.slider("Unidades del Modelo A (x‚ÇÅ)", 0, 50, 20)
    x2_val = st.slider("Unidades del Modelo B (x‚ÇÇ)", 0, 25, 10)
    
    # Calcular restricciones
    gpu_used = 3*x1_val + 4*x2_val
    ram_used = 5*x1_val + 2*x2_val
    accuracy = 0.8*x1_val + 0.9*x2_val
    
    # Mostrar resultados
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("GPU Utilizadas", f"{gpu_used}/100 horas")
    with col2:
        st.metric("RAM Utilizada", f"{ram_used}/80 GB")
    with col3:
        st.metric("Precisi√≥n Total", f"{accuracy}")
    
elif section == "üîÑ Conceptos de Dualidad":
    st.title("Dualidad en Programaci√≥n Lineal")
    
    st.markdown("""
    ### Relaci√≥n Primal-Dual
    
    Para cada problema de programaci√≥n lineal (primal), existe un problema dual correspondiente:
    
    **Problema Primal:**
    ```
    Maximizar: Z = 0.8x‚ÇÅ + 0.9x‚ÇÇ
    Sujeto a:
        3x‚ÇÅ + 4x‚ÇÇ ‚â§ 100  (y‚ÇÅ)
        5x‚ÇÅ + 2x‚ÇÇ ‚â§ 80   (y‚ÇÇ)
        x‚ÇÅ, x‚ÇÇ ‚â• 0
    ```
    
    **Problema Dual:**
    ```
    Minimizar: W = 100y‚ÇÅ + 80y‚ÇÇ
    Sujeto a:
        3y‚ÇÅ + 5y‚ÇÇ ‚â• 0.8  (x‚ÇÅ)
        4y‚ÇÅ + 2y‚ÇÇ ‚â• 0.9  (x‚ÇÇ)
        y‚ÇÅ, y‚ÇÇ ‚â• 0
    ```
    """)
    
    # Demostraci√≥n interactiva de dualidad
    st.markdown("### Precios Sombra (Variables Duales)")
    recurso = st.selectbox("Seleccionar Recurso", ["GPU", "RAM"])
    
    if recurso == "GPU":
        precios_sombra = np.linspace(0, 1, 100)
        valor = 100 * precios_sombra
    else:
        precios_sombra = np.linspace(0, 1, 100)
        valor = 80 * precios_sombra
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=precios_sombra, y=valor, 
                             mode='lines', name='Valor del Recurso'))
    fig.update_layout(
        title=f"Valor del Recurso {recurso} vs Precio Sombra",
        xaxis_title="Precio Sombra",
        yaxis_title="Valor del Recurso"
    )
    st.plotly_chart(fig)
    
elif section == "‚öñÔ∏è Interpretaci√≥n Econ√≥mica":
    st.title("Interpretaci√≥n Econ√≥mica y Aplicaciones")
    
    st.markdown("""
    ### Precios Sombra y Significado Econ√≥mico
    
    En nuestro ejemplo de asignaci√≥n de recursos:
    - Cada variable dual (y‚ÇÅ, y‚ÇÇ) representa el valor marginal de los recursos
    - Los precios sombra indican cu√°nto aumentar√≠a la precisi√≥n por unidad adicional de recurso
    
    ### Aplicaciones Pr√°cticas
    1. **Asignaci√≥n de Recursos**
    2. **Decisiones de Presupuesto**
    3. **An√°lisis de Sensibilidad**
    """)
    
    # An√°lisis de sensibilidad interactivo
    st.markdown("### Herramienta de An√°lisis de Sensibilidad")
    cambio_recurso = st.slider("Cambio en Disponibilidad de Recursos (%)", -20, 20, 0)
    
    # Calcular impacto
    precision_base = -problem['c'][0]*result.x[0] - problem['c'][1]*result.x[1]
    sensibilidad = 0.1    # Ejemplo de factor de sensibilidad
    nueva_precision = precision_base * (1 + cambio_recurso * sensibilidad / 100)
    
    st.metric("Impacto en la Precisi√≥n", 
              f"{nueva_precision:.2f}", 
              f"{cambio_recurso}% cambio en recursos")
    
if __name__ == "__main__":
    st.sidebar.markdown("""
    ### Acerca de esta Aplicaci√≥n
    Esta herramienta educativa ayuda a entender:
    - M√©todo de Dos Fases
    - Programaci√≥n Lineal
    - Teor√≠a de Dualidad
    - Aplicaciones en Ciencia de Datos
    
    Creado con fines educativos.
    """)
